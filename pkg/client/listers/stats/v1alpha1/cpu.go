/*
Copyright 2018 interma.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/interma/programming-k8s/pkg/apis/stats/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CpuLister helps list Cpus.
type CpuLister interface {
	// List lists all Cpus in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Cpu, err error)
	// Cpus returns an object that can list and get Cpus.
	Cpus(namespace string) CpuNamespaceLister
	CpuListerExpansion
}

// cpuLister implements the CpuLister interface.
type cpuLister struct {
	indexer cache.Indexer
}

// NewCpuLister returns a new CpuLister.
func NewCpuLister(indexer cache.Indexer) CpuLister {
	return &cpuLister{indexer: indexer}
}

// List lists all Cpus in the indexer.
func (s *cpuLister) List(selector labels.Selector) (ret []*v1alpha1.Cpu, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Cpu))
	})
	return ret, err
}

// Cpus returns an object that can list and get Cpus.
func (s *cpuLister) Cpus(namespace string) CpuNamespaceLister {
	return cpuNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CpuNamespaceLister helps list and get Cpus.
type CpuNamespaceLister interface {
	// List lists all Cpus in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Cpu, err error)
	// Get retrieves the Cpu from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Cpu, error)
	CpuNamespaceListerExpansion
}

// cpuNamespaceLister implements the CpuNamespaceLister
// interface.
type cpuNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Cpus in the indexer for a given namespace.
func (s cpuNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Cpu, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Cpu))
	})
	return ret, err
}

// Get retrieves the Cpu from the indexer for a given namespace and name.
func (s cpuNamespaceLister) Get(name string) (*v1alpha1.Cpu, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("cpu"), name)
	}
	return obj.(*v1alpha1.Cpu), nil
}
